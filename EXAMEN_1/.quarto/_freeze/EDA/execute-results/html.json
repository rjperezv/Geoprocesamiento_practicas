{
  "hash": "6bb2e610663f9140af6d99fcca7626d3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Guia de conectividad con GitHub\"\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    number-sections: true\nlang: es\n---\n\n\n\n\n## Configuración de GitHub\n\nAhora que tenemos algunas generaliddes sobre GitHub, su uso e importancia podemos comenzar a usarlo.\n\n## **Crea una cuenta en GitHub**\n\nPuedes omitir algunos pasos si ya los tienes\n\nCrea una cuenta en GitHub si aún no tienes [aqui](https://github.com/)\n\n## **Crear Nuevo Repositorio**\n\nUn repositorio de GitHub es como su carpeta en la nube. Puede almacenar archivos (datos, código fuente), ver los cambios históricos en estos archivos, abrir problemas, discutir cambios y mucho más. Las personas suelen crear un repositorio por proyecto.\n\nLa sección **Owner** ya tendrá el nombre de tu cuenta. Crea un **nombre de repositorio**. Comprueba si está configurado como **Público** para que sea de código abierto, y luego marca la casilla **Add a README file**. Finalmente, haz clic en **Create repository**.\n\n![Contenedores en ejecución](imagenes/Repo.png)\n\nAl crear tu repositorio puedes crear un archivo README, que es un documento de texto (normalmente llamado `README.md`) el cual contiene información importante sobre tu proyecto, como ¿qué hace?, ¿cómo usarlo?, ¿quién lo mantiene? y ¿cómo contribuir?. Es la primera cosa que ven los visitantes cuando entran a tu repositorio en GitHub, y ayuda a que otros entiendan tu proyecto fácilmente.\n\nPuedes crear tu repositorio sin un README, o de modo privado segun desees manejar tu información.\n\n![Contenedores en ejecución](imagenes/read.png)\n\nPuedes explorar otras funciones de GitHub [aqui](https://www.hostinger.com/ar/tutoriales/que-es-github#%C2%BFQue_es_el_control_de_versiones)\n\n## **Configurar Git Localmente**\n\nPara evitar ingresar credenciales repetidamente:\n\nConfigura tu nombre y correo en Git ejecutando en la terminal:\n\n\n\n\n```{Markdown include=FALSE}\n git config --global user.name \"Tu Nombre\" \n git config --global user.email \"tuemail@ejemplo.com\"\n\n```\n\n\n\n\nEn la parte inferio\n### Configura autenticación\n\nSi el servidor tiene que acceder a repositorios en una o más organizaciones, puede usar GitHub App para definir el acceso necesario y, luego, generar tokens de acceso de instalación de *ámbito limitado* desde esa GitHub App. Se puede ajustar el alcance de los tokens de acceso de instalación para repositorios múltiples y pueden tener permisos específicos. Por ejemplo, puedes generar un token con acceso de solo lectura al contenido de un repositorio.\n\nYa que las GitHub Apps son un actor de primera clase en GitHub, los tokens de acceso de instalación se desacoplan de cualquier usuario de GitHub, lo cual los hace comparables con los \"tokens de servicio\". Adicionalmente, los tokens de acceso de instalación tienen límites de tasa dedicados que se escalan de acuerdo con el tamaño de las organizaciones sobre las cuales actúan.\n\n###  [**Ventajas de los tokens de acceso de instalación**](https://docs.github.com/es/authentication/connecting-to-github-with-ssh/managing-deploy-keys#pros-of-installation-access-tokens)\n\n· Tokens de alcance muy específico con conjuntos de permisos bien definidos y tiempos de vencimiento (1 hora o menos si se revocan manualmente utilizando la API)\n\n·Límites de tasa dedicados que crecen con tu organización\n\n· Desacoplado de identidades de usuario de GitHub, por lo que no consumen puestos con licencia\n\n·Nunca se les otorga una contraseña, así que no se puede iniciar sesión directamente en ellos\n\n### [**Desventajas de los tokens de acceso de instalación**](https://docs.github.com/es/authentication/connecting-to-github-with-ssh/managing-deploy-keys#cons-of-installation-access-tokens)\n\n·Se necesita una configuración adicional para crear GitHub App.\n\n·         Los tokens de acceso de instalación expiran después de 1 hora ( o el tiempo que tu selecciones), por lo que necesitan volver a generarse habitualmente cuando se necesiten utilizando código\n\n·         Tokens de alcance muy específico con conjuntos de permisos bien definidos y tiempos de vencimiento (1 hora o menos si se revocan manualmente utilizando la API)\n\n·         Límites de tasa dedicados que crecen con tu organización\n\n·         Desacoplado de identidades de usuario de GitHub, por lo que no consumen puestos con licencia\n\n·         Nunca se les otorga una contraseña, así que no se puede iniciar sesión directamente en ellos\n\n1.  Ve a <https://github.com/settings/tokens>\n\n2.  Haz clic en **\"Generate new token (classic)\"**\n\n    ![Contenedores en ejecución](imagenes/token.png)\n\n3.  Selecciona estos permisos:\n\n    `repo`\n\n    (Opcional: `workflow` si usarás GitHub Actions)\n\n4.  Copia el token generado (se verá como: `ghp_xxxxxxxxxxxxxxxxxxxxxx`)\n\n## Nota opcional: como usar el token para autenticarse en VS Code desde tu notebook\n\n### Opción 1: Usar el token al hacer operaciones Git por HTTPS\n\nCuando hagas un comando Git que requiera autenticación, como **`git push`** o **`git clone`**, Git te pedirá usuario y contraseña.\n\n**Usuario:** tu nombre de usuario de GitHub.\n\n**Contraseña:** en lugar de tu contraseña, pega el token que generaste.\n\n### Opción 2:  Configurar el token para que VS Code lo recuerde\n\nPara evitar ingresar el token cada vez:\n\n1.  Abre VS Code y el terminal integrado.\n\n2.  Configura Git para usar un asistente de credenciales que guarde el token\n\n    `git config --global credential.helper cache`\n\n    #### ¿Cómo lo usas?\n\n    Cuando haces:\n\n    `git push`\n\n    Y te pide:\n\n    `Username: tuusuario`\n\n    `Password:  ← aquí pega el token`\n\n",
    "supporting": [
      "EDA_files"
    ],
    "filters": [],
    "includes": {}
  }
}